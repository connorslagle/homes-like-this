"""
Django settings for real_estate_recommender project.

Generated by 'django-admin startproject' using Django 2.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import logging
from google.cloud import secretmanager

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Define base GCP-Related Variables
GCP_PROJECT_ID = os.environ.get("GOOGLE_CLOUD_PROJECT", "")
GCP_SECRET_LOCATION = f"projects/{GCP_PROJECT_ID}/secrets/"
SECRET_MANAGER_CLIENT = secretmanager.SecretManagerServiceClient()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '09xh1#6ou$8cv4seie^4114v=kc*hk(1)v&k#8$2%-s3v$h@qt'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'recommender',
    'autoencoder'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'real_estate_recommender.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'real_estate_recommender.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': dict()
}


if os.getenv('GAE_INSTANCE'):
    secret_name = os.environ["SECRET_NAME"]
    cloud_sql_conn_name = os.environ["CLOUDSQL_CONN_NAME"]
    secret_version = os.environ.get("SECRET_VERSION", "latest")

    name = f"{GCP_SECRET_LOCATION}{secret_name}"
    secret_labels = SECRET_MANAGER_CLIENT.get_secret(name=name).labels

    db_name = secret_labels.get("database")
    if not db_name:
        if not os.environ.get("DATABASE_NAME"):
            logger.info(f"No 'database' label on {secret_name} or in ENV variables, defaulting to 'postgres'")
            db_name = 'postgres'
        else:
            db_name = os.environ['DATABASE_NAME']

    db_user = secret_labels.get("user")
    if not db_user:
        logger.info(f"No 'user' label on {secret_name}, defaulting to 'postgres'")
        db_user = 'postgres'

    db_port = secret_labels.get("port", "5432")

    name += f"/versions/{secret_version}"

    DATABASES['default']['ENGINE'] = 'django.db.backends.postgresql'
    DATABASES['default']['NAME'] = db_name
    DATABASES['default']['PORT'] = db_port
    DATABASES['default']['USER'] = db_user
    DATABASES['default']['HOST'] = f'/cloudsql/{cloud_sql_conn_name}'
    DATABASES['default']['PASSWORD'] = (
        SECRET_MANAGER_CLIENT.access_secret_version(name=name).payload.data.decode('UTF-8')
    )

    # These are people who'll receive error emails and tracebacks
    ADMINS = [
        ('Connor Slagle', 'con.slagle@gmail.com'),
    ]
    SERVICE_NAME = os.environ["SERVICE_NAME"]

else:
    logger.info("GAE not detected. Initializing using SQLite.")
    DATABASES['default']['ENGINE'] = 'django.db.backends.sqlite3'
    DATABASES['default']['NAME'] = os.path.join(BASE_DIR, 'db.sqlite3')

    ADMINS = []  # We don't want local envs sending emails to people
    SERVICE_NAME = 'localhost'


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/
# Trying to incorporate bootstrap template, see
# https://stackoverflow.com/questions/10157059/how-can-i-use-bootstrap-with-django

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    'recommender/static/'
]